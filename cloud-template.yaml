AWSTemplateFormatVersion: "2010-09-09"
Description: GraphQL Server stack for Spend Daily
Transform: AWS::Serverless-2016-10-31

Parameters:
  GitHubRepo:
    Type: String
    Default: graphql-server

  GitHubBranch:
    Type: String
    Default: "master"
  
  GitHubOwner:
    Type: String
    Default: "spend-daily"

Resources:
  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                # Install yarn natively https://yarnpkg.com/en/docs/install#linux-tab
                - sudo apt-get update && sudo apt-get install apt-transport-https
                - curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
                - echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
                - sudo apt-get update && sudo apt-get install yarn
                - yarn
            build:
              commands:
                - yarn run build
            post_build:
              commands:
                - aws cloudformation package --template-file cloud-template.yaml --s3-bucket "${BUILD_BUCKET}" --output-template-file cloud-formation.yaml
          artifacts:
            type: zip
            files:
              - node_modules/
              - lib/
              - cloud-formation.yaml
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/nodejs:6.3.1"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: BUILD_BUCKET
            Value: !ImportValue spend-daily-global-artifact-bucket
      Name: !Ref AWS::StackName
      ServiceRole: !ImportValue spend-daily-global-build-role

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: GraphQLServerPipeline
      RoleArn: !ImportValue spend-daily-global-pipeline-role-arn
      ArtifactStore:
        Type: S3
        Location: !ImportValue spend-daily-global-artifact-bucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceCode
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !ImportValue spend-daily-github-token
              OutputArtifacts:
                - Name: SourceCode
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BuildProject
              InputArtifacts:
                - Name: SourceCode
              OutputArtifacts:
                - Name: CloudFormation
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: CreateChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                Capabilities: CAPABILITY_NAMED_IAM
                ChangeSetName: GraphQLServerChangeSet
                RoleArn: !ImportValue spend-daily-global-stack-role-arn
                StackName: !Ref AWS::StackName
                TemplatePath: CloudFormation::cloud-formation.yaml
              InputArtifacts:
                - Name: CloudFormation
              RunOrder: 1
            - Name: ExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: GraphQLServerChangeSet
                RoleArn: !ImportValue spend-daily-global-stack-role-arn
                StackName: !Ref AWS::StackName
              RunOrder: 2

  GraphQLServerPolicy:
    Type: AWS::IAM::GraphQLServerPolicy
    Properties:
      ManagedPolicyName: graphql-server-lambda-policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Resource: !Join
            - ":"
            - - "arn:aws:codepipeline:us-west-2:181782121001"
              - !Ref GraphQLServerPipeline
            Effect: Allow
            Action:
              - "codepipeline:PutJobSuccessResult"
              - "codepipeline:PutJobFailureResult"
          - Resource: "*"
            Effect: Allow
            Action:
              - "rds:*"
              - "logs:*"

  GraphQLServerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Ref GraphQLServerPolicy
        - !ImportValue spend-daily-global-vpc-policy

  GraphQLServer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: lib.default
      Role: !GetAtt GraphQLServerRole.Arn
      Runtime: nodejs6.10
      Timeout: 30
      Environment:
        Variables:
          DB_USERNAME: !ImportValue spend-daily-global-db-user
          DB_PASSWORD: !ImportValue spend-daily-global-db-password
          DB_NAME: spend
          DB_ADDRESS: !ImportValue spend-daily-global-db-address
          DB_PORT: !ImportValue spend-daily-global-db-port
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue spend-daily-global-security-group-id
        SubnetIds:
          - !ImportValue spend-daily-global-subnet-us-west-2a
          - !ImportValue spend-daily-global-subnet-us-west-2b
      Events:
        GetRequest:
          Type: Api
          Properties:
            Path: /graphiql
            Method: get
            RestApiId: ApiGateway
        PostRequest:
          Type: Api
          Properties:
            Path: /graphql
            Method: post
            RestApiId: ApiGateway

  GraphQLApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      DefinitionBody:
        swagger: 2.0
        info:
          version: 1.0
          title: !Ref AWS::StackName
        paths:
          "/graphiql":
            get:
              responses: {}
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GraphQLServer.Arn}/invocations
                httpMethod: GET
                type: aws_proxy
          "/graphql":
            post:
              responses: {}
              security:
              - UserPool: []
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GraphQLServer.Arn}/invocations
                httpMethod: POST
                type: aws_proxy
        securityDefinitions:
          UserPool:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: cognito_user_pools
            x-amazon-apigateway-authorizer:
              providerARNs:
              - arn:aws:cognito-idp:us-west-2:xxx:userpool/xxx
              type: cognito_user_pools

  GraphQLPerms:
    Type: AWS::Lambda::Permission
    DependsOn:
      - GraphQLApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GraphQLServer
      Principal: apigateway.amazonaws.com
